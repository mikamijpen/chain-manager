链式时延协议管理系统 - 函数功能与调用关系分析
================================================================

文件概述：
- main.py: 核心业务逻辑，包含ChainDelayProtocol类和命令行界面
- ui_main.py: GUI界面实现，包含ChainDelayProtocolGUI类

================================================================
一、main.py 函数分析
================================================================

【类：ChainDelayProtocol】
核心业务逻辑类，负责链式时延协议的所有功能实现

1. __init__(self, data_file: str = "protocol_data.json")
   功能：初始化协议实例
   - 设置数据文件路径
   - 调用load_data()加载数据
   - 初始化运行时状态变量
   调用关系：→ load_data()

2. load_data(self) -> Dict[str, Any]
   功能：从JSON文件加载数据，如果文件不存在则使用默认数据
   - 定义默认数据结构
   - 尝试读取JSON文件
   - 合并默认数据和加载数据
   调用关系：被__init__()调用

3. save_data(self)
   功能：将当前数据保存到JSON文件
   - 使用UTF-8编码写入文件
   - 异常处理保护数据安全
   调用关系：被多个修改数据的函数调用

4. start_reservation(self)
   功能：启动15分钟预约链倒计时
   - 检查当前状态是否允许启动
   - 设置预约结束时间
   - 启动后台计时器线程
   调用关系：→ _reservation_timer() (通过线程)

5. _reservation_timer(self)
   功能：预约链后台计时器
   - 循环检查剩余时间
   - 超时时提示处理方式
   调用关系：被start_reservation()通过线程调用

6. start_task(self)
   功能：触发神圣座位，开始30分钟任务
   - 停止预约链（如果活跃）
   - 设置任务结束时间
   - 启动任务计时器线程
   调用关系：→ _task_timer() (通过线程)

7. _task_timer(self)
   功能：任务后台计时器
   - 循环检查任务剩余时间
   - 超时时自动完成任务
   调用关系：被start_task()通过线程调用 → complete_task()

8. complete_task(self)
   功能：完成当前任务
   - 停止任务状态
   - 创建新的任务链节点
   - 保存数据
   调用关系：→ save_data()

9. stop_task(self)
   功能：停止当前任务（不记录完成）
   - 简单停止任务状态
   调用关系：无

10. handle_violation(self)
    功能：处理违规行为，实现"下必为例"原则
    - 获取违规描述
    - 提供两种处理选择
    调用关系：→ _reset_chain() 或 _allow_violation()

11. _reset_chain(self, description: str)
    功能：重置任务链，清空所有节点
    - 清空任务链数据
    - 停止任务状态
    - 保存数据
    调用关系：被handle_violation()调用 → save_data()

12. _allow_violation(self, description: str)
    功能：永久允许违规行为
    - 创建新的允许违规记录
    - 添加到数据中
    - 保存数据
    调用关系：被handle_violation()调用 → save_data()

13. show_status(self)
    功能：显示当前系统状态
    - 显示预约链状态和剩余时间
    - 显示任务状态和剩余时间
    - 显示任务链历史
    调用关系：无

14. show_allowed_violations(self)
    功能：显示所有已允许的违规行为
    - 遍历显示允许违规列表
    调用关系：无

15. manage_formulas(self)
    功能：定式树管理主菜单
    - 显示定式树结构
    - 提供添加/删除操作选项
    调用关系：→ _show_formula_tree(), _add_formula(), _remove_formula()

16. _show_formula_tree(self, parent_id=None, level=0)
    功能：递归显示定式树结构
    - 按层级缩进显示
    - 递归处理子节点
    调用关系：被manage_formulas()调用，自递归调用

17. _add_formula(self)
    功能：添加新定式到树中
    - 获取定式名称和父节点
    - 创建新定式记录
    - 更新父节点的children列表
    调用关系：被manage_formulas()调用 → save_data()

18. _remove_formula(self)
    功能：删除定式及其所有子节点
    - 获取要删除的定式ID
    - 递归获取所有子节点
    - 批量删除并更新关系
    调用关系：被manage_formulas()调用 → get_descendants() → save_data()
    
    内部函数：get_descendants(node_id)
    功能：递归获取节点的所有后代
    调用关系：被_remove_formula()调用，自递归调用

【函数：main()】
功能：命令行界面主函数
- 创建ChainDelayProtocol实例
- 显示菜单循环
- 调用相应的协议方法
调用关系：→ ChainDelayProtocol的各种方法

================================================================
二、ui_main.py 函数分析
================================================================

【类：ChainDelayProtocolGUI】
GUI界面类，提供图形化操作界面

1. __init__(self, root)
   功能：初始化GUI界面
   - 设置窗口属性
   - 创建协议实例
   - 设置样式和界面
   - 启动状态更新线程
   调用关系：→ setup_styles(), create_main_interface(), update_status_loop()

2. setup_styles(self)
   功能：设置tkinter界面样式
   - 配置按钮样式
   - 配置标签样式
   调用关系：被__init__()调用

3. create_main_interface(self)
   功能：创建主界面布局
   - 创建标题区域
   - 创建控制面板和状态面板
   调用关系：被__init__()调用 → create_control_panel(), create_status_panel()

4. create_control_panel(self, parent)
   功能：创建左侧控制按钮面板
   - 创建各功能模块的按钮组
   - 绑定按钮事件处理函数
   调用关系：被create_main_interface()调用

5. create_status_panel(self, parent)
   功能：创建右侧状态显示面板
   - 创建状态文本显示区域
   - 创建时间显示标签
   调用关系：被create_main_interface()调用

6. update_status_display(self)
   功能：更新界面状态显示
   - 获取最新状态信息
   - 更新文本显示和时间标签
   调用关系：被update_status_loop()调用 → get_status_info(), get_countdown_text()

7. get_status_info(self)
   功能：获取格式化的状态信息文本
   - 格式化预约链和任务状态
   - 显示任务历史和统计信息
   调用关系：被update_status_display()调用

8. get_countdown_text(self)
   功能：获取倒计时显示文本
   - 根据当前状态返回相应倒计时
   调用关系：被update_status_display()调用

9. update_status_loop(self)
   功能：状态更新循环线程函数
   - 定时调用状态更新
   调用关系：被__init__()通过线程调用 → update_status_display()

10. start_reservation(self)
    功能：启动预约链的GUI包装函数
    - 调用协议的start_reservation方法
    - 显示消息框反馈
    调用关系：→ self.protocol.start_reservation()

11. start_task(self)
    功能：开始任务的GUI包装函数
    - 检查预约链状态
    - 调用协议的start_task方法
    - 显示消息框反馈
    调用关系：→ self.protocol.start_task()

12. complete_task(self)
    功能：完成任务的GUI包装函数
    - 检查任务状态
    - 调用协议的complete_task方法
    - 显示消息框反馈
    调用关系：→ self.protocol.complete_task()

13. stop_task(self)
    功能：停止任务的GUI包装函数
    - 检查任务状态
    - 调用协议的stop_task方法
    - 显示消息框反馈
    调用关系：→ self.protocol.stop_task()

14. handle_violation(self)
    功能：处理违规行为的GUI入口
    - 检查任务状态
    - 创建违规处理对话框
    调用关系：→ create_violation_dialog()

15. create_violation_dialog(self)
    功能：创建违规处理对话框
    - 创建输入界面
    - 定义内部处理函数
    调用关系：→ reset_chain(), allow_violation() (内部函数)
    
    内部函数：reset_chain()
    功能：重置任务链的对话框处理
    调用关系：→ self.protocol._reset_chain()
    
    内部函数：allow_violation()
    功能：允许违规的对话框处理
    调用关系：→ self.protocol._allow_violation()

16. show_allowed_violations(self)
    功能：显示已允许违规行为的对话框
    - 创建显示窗口
    - 格式化显示违规列表
    调用关系：无

17. manage_formulas(self)
    功能：打开定式管理对话框
    - 创建定式管理窗口
    调用关系：→ create_formula_management_dialog()

18. create_formula_management_dialog(self, parent)
    功能：创建定式管理对话框界面
    - 创建树形控件显示定式
    - 创建操作按钮
    调用关系：→ refresh_formula_tree(), add_formula_dialog(), remove_formula_dialog()

19. refresh_formula_tree(self)
    功能：刷新定式树显示
    - 清空现有显示
    - 递归构建树形结构
    调用关系：被create_formula_management_dialog()等调用

20. add_formula_dialog(self)
    功能：创建添加定式对话框
    - 创建输入界面
    - 定义添加处理函数
    调用关系：→ add_formula() (内部函数)
    
    内部函数：add_formula()
    功能：执行添加定式操作
    调用关系：→ self.protocol.save_data(), refresh_formula_tree()

21. remove_formula_dialog(self)
    功能：删除选中定式的处理
    - 获取选中项
    - 执行删除操作
    - 更新显示
    调用关系：→ self.protocol.save_data(), refresh_formula_tree()

22. on_closing(self)
    功能：窗口关闭事件处理
    - 停止更新线程
    - 销毁窗口
    调用关系：被窗口关闭事件调用

【函数：main()】
功能：GUI应用程序入口函数
- 创建tkinter根窗口
- 创建GUI应用实例
- 启动消息循环
调用关系：→ ChainDelayProtocolGUI()

================================================================
三、跨文件调用关系
================================================================

ui_main.py → main.py 的调用关系：
1. from main import ChainDelayProtocol
2. ChainDelayProtocolGUI.__init__() → ChainDelayProtocol()
3. GUI各方法通过self.protocol调用ChainDelayProtocol的方法：
   - start_reservation() → protocol.start_reservation()
   - start_task() → protocol.start_task()
   - complete_task() → protocol.complete_task()
   - stop_task() → protocol.stop_task()
   - handle_violation() → protocol._reset_chain() / protocol._allow_violation()
   - 定式管理 → protocol.data['formulas'] / protocol.save_data()

================================================================
四、线程调用关系
================================================================

main.py中的线程：
1. start_reservation() → threading.Thread(target=_reservation_timer)
2. start_task() → threading.Thread(target=_task_timer)

ui_main.py中的线程：
1. __init__() → threading.Thread(target=update_status_loop)

================================================================
五、数据流向分析
================================================================

数据持久化流向：
1. 所有数据变更 → save_data() → protocol_data.json
2. 程序启动 → load_data() → 从protocol_data.json加载

状态同步流向：
1. main.py中的状态变更 → 影响self.reservation_active, self.task_active等
2. ui_main.py通过self.protocol访问这些状态
3. update_status_loop()定时读取状态并更新GUI显示

================================================================
六、核心业务逻辑流程
================================================================

预约链流程：
start_reservation() → _reservation_timer() → (超时处理)

任务链流程：
start_task() → _task_timer() → complete_task() → save_data()

违规处理流程：
handle_violation() → _reset_chain() 或 _allow_violation() → save_data()

定式管理流程：
manage_formulas() → _add_formula() 或 _remove_formula() → save_data()

================================================================
总结：
- main.py提供核心业务逻辑，所有功能都通过ChainDelayProtocol类实现
- ui_main.py提供GUI包装，通过调用ChainDelayProtocol的方法实现界面交互
- 两个文件通过导入关系连接，GUI作为业务逻辑的前端界面
- 数据持久化通过JSON文件实现，所有状态变更都会自动保存
- 多线程用于实现实时计时和状态更新功能
================================================================
